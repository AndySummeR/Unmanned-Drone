
/*----- Import needed libraries -----*/
#include <SPI.h>   // Comes with Arduino IDE
#include "RF24.h"  // Download and Install (See above)
#include <Servo.h>

/*----- Declare Constants and Pin Numbers -----*/

//Create the 4 esc objects
Servo motor_1;
Servo motor_2;
Servo motor_3;
Servo motor_4;

//Motor pins
int motor_1_pin = 10;
int motor_2_pin = 11;
int motor_3_pin = 12;
int motor_4_pin = 13;

//Min and max pulse
int minPulseRate        = 1000;
int maxPulseRate        = 2000;
int throttleChangeDelay = 50;

/*-----( Declare objects )-----*/
// (Create an instance of a radio, specifying the CE and CSN pins. )
RF24 myRadio (9, 53); // "myRadio" is the identifier you will use in following methods
/*-----( Declare Variables )-----*/
byte addresses[][6] = {"1Node"}; // Create address for 1 pipe.
int dataReceived;  // Data that will be received from the transmitter

void setup()   /****** SETUP: RUNS ONCE ******/
{
  // Use the serial Monitor (Symbol on far right). Set speed to 115200 (Bottom Right)
  Serial.begin(115200);
  delay(1000);
  Serial.println(F("RF24/Simple Receive data Test"));

  myRadio.begin();  // Start up the physical nRF24L01 Radio
  myRadio.setChannel(108);  // Above most Wifi Channels

  myRadio.setPALevel(RF24_PA_MAX);  // Uncomment for more power

  myRadio.openReadingPipe(1, addresses[0]); // Use the first entry in array 'addresses' (Only 1 right now)
  myRadio.startListening();
  Serial.setTimeout(500);

  //Init escs
  initEscs();

}//--(end setup )---


void loop()   /****** LOOP: RUNS CONSTANTLY ******/
{

  if ( myRadio.available()) // Check for incoming data from transmitter
  {
    while (myRadio.available())  // While there is data ready
    {
      myRadio.read( &dataReceived, sizeof(dataReceived) ); // Get the data payload (You must have defined that already!)
    }
    // DO something with the data, like print it
    Serial.print("Data received = ");
    Serial.println(dataReceived);

    changeThrottle(dataReceived);
  } //END Radio available

}//--(end main loop )---

/*-----( Declare User-written Functions )-----*/


//Change velocity of the 4 escs at the same time
void writeTo4Escs(int throttle) {
  motor_1.write(throttle);
  motor_2.write(throttle);
  motor_3.write(throttle);
  motor_4.write(throttle);
}

//Init escs
void initEscs() {
  motor_1.attach(motor_1_pin, minPulseRate, maxPulseRate);
  motor_2.attach(motor_2_pin, minPulseRate, maxPulseRate);
  motor_3.attach(motor_3_pin, minPulseRate, maxPulseRate);
  motor_4.attach(motor_4_pin, minPulseRate, maxPulseRate);

  //Init motors with 0 value
  writeTo4Escs(0);
}

//Start the motors
void startUpMotors() {
  writeTo4Escs(10);
}

// Ensure the throttle value is between 0 - 180
int normalizeThrottle(int value) {
  if (value < 0) {
    return 0;

  } else if (value > 180) {
    return 180;
  }

  return value;
}

//Change throttle value
void changeThrottle(int throttle) {
  int currentThrottle = readThrottle();

  int step = 1;
  if (throttle < currentThrottle) {
    step = -1;
  }

  // Slowly move to the new throttle value
  while (currentThrottle != throttle) {
    writeTo4Escs(currentThrottle + step);

    currentThrottle = readThrottle();
    delay(throttleChangeDelay);
  }
}

//Read the throttle value
int readThrottle() {
  int throttle = motor_1.read();

  Serial.print("Current throttle is: ");
  Serial.print(throttle);
  Serial.println();

  return throttle;
}

//None yet
//*********( THE END )***********

